<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="11" time="0.602" timestamp="2024-11-03T12:22:45.167870-05:00" hostname="DESKTOP-69FJA4Q"><testcase classname="test_api" name="test_getBooks_gToken_whenNoApiAccessToken_shouldReturn403" time="0.008" /><testcase classname="test_api" name="test_getBooks_gToken_whenValidApiAccessToken_shouldReturn200" time="0.018" /><testcase classname="test_api" name="test_getBooks_searchById_whenValidId_shouldReturnBook" time="0.028" /><testcase classname="test_api" name="test_getBooks_searchById_whenInvalidId_shouldReturn404" time="0.031" /><testcase classname="test_api" name="test_getBooks_searchByTitle_whenValidTitle_shouldReturnBook" time="0.031" /><testcase classname="test_api" name="test_getBooks_searchByTitle_whenInvalidTitle_shouldReturnNoBooks" time="0.031" /><testcase classname="test_api" name="test_getBooks_searchByAuthor_whenValidAuthor_shouldReturnBook" time="0.031" /><testcase classname="test_api" name="test_getBooks_whenInvalidAuthor_shouldReturnNoBooks" time="0.031" /><testcase classname="test_api" name="test_postBooks_addBook_whenValidRequest_shouldSuccessfullyAddBook" time="0.062" /><testcase classname="test_api" name="test_deleteBooks_deleteBook_whenValidBasicAuth_shouldDeleteBook" time="0.114" /><testcase classname="test_api" name="test_deleteBooks_deleteBook_whenInvalidBasicAuth_shouldNotDeleteBook" time="0.076"><failure message="assert 401 == 999&#10; +  where 401 = &lt;Response [401]&gt;.status_code">context = {'book_ids': [44]}

    def test_deleteBooks_deleteBook_whenInvalidBasicAuth_shouldNotDeleteBook(context):
        # Given a book has been added
        unique = str(time.time()*1000000).replace('.','')
        title = "Automation Book " + unique
        author = "Automation Author " + unique
        isbn = "1234" + unique
        releaseDate = "2019-02-01"
        response = requests.request("POST", ConfigProvider.get_host() + "/books", headers={'g-token': 'ROM831ESV','Content-Type': 'application/json','Authorization': 'Basic Og=='}, data=json.dumps({"title": title,"author": author,"isbn": isbn,"releaseDate": releaseDate}))
        book_id = response.json()["id"]
        context["book_ids"].append(response.json()["id"])
    
        # And Basic Auth credentials is not provided
        auth = None
    
        # When the book is deleted
        url = ConfigProvider.get_host() + "/books/" + str(book_id)
        headers = {
            'g-token': 'ROM831ESV',
            'Content-Type': 'application/json'
            }
        response = requests.request("DELETE", url, headers=headers)
    
        # Then 401 is returned
&gt;       assert response.status_code == 999
E       assert 401 == 999
E        +  where 401 = &lt;Response [401]&gt;.status_code

test_api.py:205: AssertionError</failure></testcase></testsuite></testsuites>